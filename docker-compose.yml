# MIRAGE v2 - Docker Compose Configuration
# Complete development and production environment

version: '3.8'

services:
  # =============================================================================
  # MIRAGE v2 Application
  # =============================================================================
  mirage:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: mirage-v2
    ports:
      - "8000:8000"  # API
      - "8080:8080"  # Dashboard
    environment:
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - CHROMA_DB_PATH=/app/data/embeddings
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - RAG_CHUNK_SIZE=${RAG_CHUNK_SIZE:-1000}
      - RAG_CHUNK_OVERLAP=${RAG_CHUNK_OVERLAP:-200}
      - RAG_MAX_RESULTS=${RAG_MAX_RESULTS:-5}
      - ORCHESTRATOR_MAX_RETRIES=${ORCHESTRATOR_MAX_RETRIES:-3}
      - ORCHESTRATOR_RETRY_DELAY_SECONDS=${ORCHESTRATOR_RETRY_DELAY_SECONDS:-1}
      - ORCHESTRATOR_CACHE_TTL_SECONDS=${ORCHESTRATOR_CACHE_TTL_SECONDS:-3600}
      - HUMAN_LOOP_TIMEOUT_SECONDS=${HUMAN_LOOP_TIMEOUT_SECONDS:-300}
      - HUMAN_LOOP_PRIORITY_THRESHOLD=${HUMAN_LOOP_PRIORITY_THRESHOLD:-0.3}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config
    depends_on:
      - chromadb
      - redis
    restart: unless-stopped
    networks:
      - mirage-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # =============================================================================
  # ChromaDB Vector Database
  # =============================================================================
  chromadb:
    image: chromadb/chroma:latest
    container_name: mirage-chromadb
    ports:
      - "8001:8000"
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
    volumes:
      - chromadb_data:/chroma/chroma
    restart: unless-stopped
    networks:
      - mirage-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # Redis Cache
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: mirage-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-mirage_redis_pass}
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - mirage-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # Prometheus Monitoring
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: mirage-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - mirage-network

  # =============================================================================
  # Grafana Dashboard
  # =============================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: mirage-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped
    networks:
      - mirage-network
    depends_on:
      - prometheus

  # =============================================================================
  # Nginx Reverse Proxy
  # =============================================================================
  nginx:
    image: nginx:alpine
    container_name: mirage-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - mirage
    restart: unless-stopped
    networks:
      - mirage-network

# =============================================================================
# Networks
# =============================================================================
networks:
  mirage-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# Volumes
# =============================================================================
volumes:
  chromadb_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
